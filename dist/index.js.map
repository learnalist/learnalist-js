{"version":3,"sources":["../src/index.ts","../src/core/BaseHttpRequest.ts","../src/core/ApiError.ts","../src/core/CancelablePromise.ts","../src/core/request.ts","../src/core/FetchHttpRequest.ts","../src/services/AListService.ts","../src/services/AppSettingsService.ts","../src/services/AssetService.ts","../src/services/ChallengeService.ts","../src/services/DefaultService.ts","../src/services/ListSlideshowService.ts","../src/services/MobileService.ts","../src/services/PaymentsService.ts","../src/services/PlankService.ts","../src/services/RemindService.ts","../src/services/SpacedRepetitionService.ts","../src/services/UserService.ts","../src/OpenApiClient.ts","../src/core/OpenAPI.ts"],"sourcesContent":["/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport { OpenApiClient } from './OpenApiClient';\n\nexport { ApiError } from './core/ApiError';\nexport { BaseHttpRequest } from './core/BaseHttpRequest';\nexport { CancelablePromise, CancelError } from './core/CancelablePromise';\nexport { OpenAPI } from './core/OpenAPI';\nexport type { OpenAPIConfig } from './core/OpenAPI';\n\nexport type { Alist } from './models/Alist';\nexport type { AlistFrom } from './models/AlistFrom';\nexport type { AlistInfo } from './models/AlistInfo';\nexport type { AlistInput } from './models/AlistInput';\nexport type { AlistInteract } from './models/AlistInteract';\nexport type { AlistItemEarthPosition } from './models/AlistItemEarthPosition';\nexport type { AlistItemImage } from './models/AlistItemImage';\nexport type { AlistItemMeta } from './models/AlistItemMeta';\nexport type { AlistItemPOI } from './models/AlistItemPOI';\nexport type { AlistItemV1 } from './models/AlistItemV1';\nexport type { AlistItemV2 } from './models/AlistItemV2';\nexport type { AlistItemV5 } from './models/AlistItemV5';\nexport type { AlistItemV6 } from './models/AlistItemV6';\nexport type { AlistItemV7 } from './models/AlistItemV7';\nexport type { AlistItemV8 } from './models/AlistItemV8';\nexport type { AlistV1 } from './models/AlistV1';\nexport type { AlistV1New } from './models/AlistV1New';\nexport type { AlistV2 } from './models/AlistV2';\nexport type { AlistV2New } from './models/AlistV2New';\nexport type { AlistV5 } from './models/AlistV5';\nexport type { AlistV5New } from './models/AlistV5New';\nexport type { AlistV6 } from './models/AlistV6';\nexport type { AlistV6New } from './models/AlistV6New';\nexport type { AlistV7 } from './models/AlistV7';\nexport type { AlistV7New } from './models/AlistV7New';\nexport type { AlistV8 } from './models/AlistV8';\nexport type { AlistV8New } from './models/AlistV8New';\nexport type { AppSettingsRemindV1 } from './models/AppSettingsRemindV1';\nexport type { ChallengeInfo } from './models/ChallengeInfo';\nexport type { ChallengeInput } from './models/ChallengeInput';\nexport type { ChallengeKind } from './models/ChallengeKind';\nexport type { ChallengePlankRecord } from './models/ChallengePlankRecord';\nexport type { ChallengeShortInfo } from './models/ChallengeShortInfo';\nexport type { HttpAssetShareRequestBody } from './models/HttpAssetShareRequestBody';\nexport type { HttpAssetUploadRequestBody } from './models/HttpAssetUploadRequestBody';\nexport type { HttpAssetUploadResponse } from './models/HttpAssetUploadResponse';\nexport type { HttpMobileRegisterInput } from './models/HttpMobileRegisterInput';\nexport type { HttpPlankShareRequestBody } from './models/HttpPlankShareRequestBody';\nexport type { HttpResponseMessage } from './models/HttpResponseMessage';\nexport type { HttpTokenToCookieRequest } from './models/HttpTokenToCookieRequest';\nexport type { HttpUserInfoInput } from './models/HttpUserInfoInput';\nexport type { HttpUserInfoResponse } from './models/HttpUserInfoResponse';\nexport type { HttpUserLoginIDPInput } from './models/HttpUserLoginIDPInput';\nexport type { HttpUserLoginRequest } from './models/HttpUserLoginRequest';\nexport type { HttpUserLoginResponse } from './models/HttpUserLoginResponse';\nexport type { HttpUserRegisterInput } from './models/HttpUserRegisterInput';\nexport type { HttpUserRegisterResponse } from './models/HttpUserRegisterResponse';\nexport type { Kind } from './models/Kind';\nexport type { ListSlideShowCMDConfig } from './models/ListSlideShowCMDConfig';\nexport type { ListSlideShowCMDConfigPDFV1Input } from './models/ListSlideShowCMDConfigPDFV1Input';\nexport type { ListSlideShowCMDConfigVideoV1Input } from './models/ListSlideShowCMDConfigVideoV1Input';\nexport type { ListSlideShowState } from './models/ListSlideShowState';\nexport type { ListSlideShowStateStatus } from './models/ListSlideShowStateStatus';\nexport type { MobileDeviceInfo } from './models/MobileDeviceInfo';\nexport type { MobilePlankAppV1Settings } from './models/MobilePlankAppV1Settings';\nexport type { PaymentCheckoutSession } from './models/PaymentCheckoutSession';\nexport type { PaymentPriceData } from './models/PaymentPriceData';\nexport type { PaymentPriceOption } from './models/PaymentPriceOption';\nexport type { PaymentSupportV1Input } from './models/PaymentSupportV1Input';\nexport type { Plank } from './models/Plank';\nexport type { PlankStats } from './models/PlankStats';\nexport type { PlankStreakStat } from './models/PlankStreakStat';\nexport type { RemindDailySettings } from './models/RemindDailySettings';\nexport type { RemindMedium } from './models/RemindMedium';\nexport type { ShareListInput } from './models/ShareListInput';\nexport type { ShareListReadAccessRequest } from './models/ShareListReadAccessRequest';\nexport type { ShareListWithUserInput } from './models/ShareListWithUserInput';\nexport type { SpacedRepetition } from './models/SpacedRepetition';\nexport type { SpacedRepetitionBase } from './models/SpacedRepetitionBase';\nexport type { SpacedRepetitionBaseNew } from './models/SpacedRepetitionBaseNew';\nexport type { SpacedRepetitionBaseSettings } from './models/SpacedRepetitionBaseSettings';\nexport type { SpacedRepetitionBaseSettingsShow } from './models/SpacedRepetitionBaseSettingsShow';\nexport type { SpacedRepetitionDataV1 } from './models/SpacedRepetitionDataV1';\nexport type { SpacedRepetitionEntryViewed } from './models/SpacedRepetitionEntryViewed';\nexport type { SpacedRepetitionNew } from './models/SpacedRepetitionNew';\nexport type { SpacedRepetitionOvertimeInfo } from './models/SpacedRepetitionOvertimeInfo';\nexport type { SpacedRepetitionOvertimeInput } from './models/SpacedRepetitionOvertimeInput';\nexport type { SpacedRepetitionOvertimeInputBase } from './models/SpacedRepetitionOvertimeInputBase';\nexport type { SpacedRepetitionOvertimeInputV1 } from './models/SpacedRepetitionOvertimeInputV1';\nexport type { SpacedRepetitionOvertimeInputV2 } from './models/SpacedRepetitionOvertimeInputV2';\nexport type { SpacedRepetitionSettingsV1 } from './models/SpacedRepetitionSettingsV1';\nexport type { SpacedRepetitionSettingsV2 } from './models/SpacedRepetitionSettingsV2';\nexport type { SpacedRepetitionSettingsV5 } from './models/SpacedRepetitionSettingsV5';\nexport type { SpacedRepetitionSettingsV6 } from './models/SpacedRepetitionSettingsV6';\nexport type { SpacedRepetitionStats } from './models/SpacedRepetitionStats';\nexport type { SpacedRepetitionStatsActivityAction } from './models/SpacedRepetitionStatsActivityAction';\nexport type { SpacedRepetitionStatsActivityInfo } from './models/SpacedRepetitionStatsActivityInfo';\nexport type { SpacedRepetitionStatsStreakInfo } from './models/SpacedRepetitionStatsStreakInfo';\nexport type { SpacedRepetitionV1 } from './models/SpacedRepetitionV1';\nexport type { SpacedRepetitionV1New } from './models/SpacedRepetitionV1New';\nexport type { SpacedRepetitionV2 } from './models/SpacedRepetitionV2';\nexport type { SpacedRepetitionV2New } from './models/SpacedRepetitionV2New';\nexport type { SpacedRepetitionV5 } from './models/SpacedRepetitionV5';\nexport type { SpacedRepetitionV5New } from './models/SpacedRepetitionV5New';\nexport type { SpacedRepetitionV6 } from './models/SpacedRepetitionV6';\nexport type { SpacedRepetitionV6New } from './models/SpacedRepetitionV6New';\nexport type { TierData } from './models/TierData';\nexport type { TierDataCMD } from './models/TierDataCMD';\nexport type { TierDataStripe } from './models/TierDataStripe';\nexport type { Version } from './models/Version';\n\nexport { AListService } from './services/AListService';\nexport { AppSettingsService } from './services/AppSettingsService';\nexport { AssetService } from './services/AssetService';\nexport { ChallengeService } from './services/ChallengeService';\nexport { DefaultService } from './services/DefaultService';\nexport { ListSlideshowService } from './services/ListSlideshowService';\nexport { MobileService } from './services/MobileService';\nexport { PaymentsService } from './services/PaymentsService';\nexport { PlankService } from './services/PlankService';\nexport { RemindService } from './services/RemindService';\nexport { SpacedRepetitionService } from './services/SpacedRepetitionService';\nexport { UserService } from './services/UserService';\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { CancelablePromise } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\n\nexport abstract class BaseHttpRequest {\n\n    constructor(public readonly config: OpenAPIConfig) {}\n\n    public abstract request<T>(options: ApiRequestOptions): CancelablePromise<T>;\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\n\nexport class ApiError extends Error {\n    public readonly url: string;\n    public readonly status: number;\n    public readonly statusText: string;\n    public readonly body: any;\n    public readonly request: ApiRequestOptions;\n\n    constructor(request: ApiRequestOptions, response: ApiResult, message: string) {\n        super(message);\n\n        this.name = 'ApiError';\n        this.url = response.url;\n        this.status = response.status;\n        this.statusText = response.statusText;\n        this.body = response.body;\n        this.request = request;\n    }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport class CancelError extends Error {\n\n    constructor(message: string) {\n        super(message);\n        this.name = 'CancelError';\n    }\n\n    public get isCancelled(): boolean {\n        return true;\n    }\n}\n\nexport interface OnCancel {\n    readonly isResolved: boolean;\n    readonly isRejected: boolean;\n    readonly isCancelled: boolean;\n\n    (cancelHandler: () => void): void;\n}\n\nexport class CancelablePromise<T> implements Promise<T> {\n    #isResolved: boolean;\n    #isRejected: boolean;\n    #isCancelled: boolean;\n    readonly #cancelHandlers: (() => void)[];\n    readonly #promise: Promise<T>;\n    #resolve?: (value: T | PromiseLike<T>) => void;\n    #reject?: (reason?: any) => void;\n\n    constructor(\n        executor: (\n            resolve: (value: T | PromiseLike<T>) => void,\n            reject: (reason?: any) => void,\n            onCancel: OnCancel\n        ) => void\n    ) {\n        this.#isResolved = false;\n        this.#isRejected = false;\n        this.#isCancelled = false;\n        this.#cancelHandlers = [];\n        this.#promise = new Promise<T>((resolve, reject) => {\n            this.#resolve = resolve;\n            this.#reject = reject;\n\n            const onResolve = (value: T | PromiseLike<T>): void => {\n                if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n                    return;\n                }\n                this.#isResolved = true;\n                this.#resolve?.(value);\n            };\n\n            const onReject = (reason?: any): void => {\n                if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n                    return;\n                }\n                this.#isRejected = true;\n                this.#reject?.(reason);\n            };\n\n            const onCancel = (cancelHandler: () => void): void => {\n                if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n                    return;\n                }\n                this.#cancelHandlers.push(cancelHandler);\n            };\n\n            Object.defineProperty(onCancel, 'isResolved', {\n                get: (): boolean => this.#isResolved,\n            });\n\n            Object.defineProperty(onCancel, 'isRejected', {\n                get: (): boolean => this.#isRejected,\n            });\n\n            Object.defineProperty(onCancel, 'isCancelled', {\n                get: (): boolean => this.#isCancelled,\n            });\n\n            return executor(onResolve, onReject, onCancel as OnCancel);\n        });\n    }\n\n     get [Symbol.toStringTag]() {\n            return \"Cancellable Promise\";\n     }\n\n    public then<TResult1 = T, TResult2 = never>(\n        onFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n        onRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null\n    ): Promise<TResult1 | TResult2> {\n        return this.#promise.then(onFulfilled, onRejected);\n    }\n\n    public catch<TResult = never>(\n        onRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null\n    ): Promise<T | TResult> {\n        return this.#promise.catch(onRejected);\n    }\n\n    public finally(onFinally?: (() => void) | null): Promise<T> {\n        return this.#promise.finally(onFinally);\n    }\n\n    public cancel(): void {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n            return;\n        }\n        this.#isCancelled = true;\n        if (this.#cancelHandlers.length) {\n            try {\n                for (const cancelHandler of this.#cancelHandlers) {\n                    cancelHandler();\n                }\n            } catch (error) {\n                console.warn('Cancellation threw an error', error);\n                return;\n            }\n        }\n        this.#cancelHandlers.length = 0;\n        this.#reject?.(new CancelError('Request aborted'));\n    }\n\n    public get isCancelled(): boolean {\n        return this.#isCancelled;\n    }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport { ApiError } from './ApiError';\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\nimport { CancelablePromise } from './CancelablePromise';\nimport type { OnCancel } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\n\nconst isDefined = <T>(value: T | null | undefined): value is Exclude<T, null | undefined> => {\n    return value !== undefined && value !== null;\n};\n\nconst isString = (value: any): value is string => {\n    return typeof value === 'string';\n};\n\nconst isStringWithValue = (value: any): value is string => {\n    return isString(value) && value !== '';\n};\n\nconst isBlob = (value: any): value is Blob => {\n    return (\n        typeof value === 'object' &&\n        typeof value.type === 'string' &&\n        typeof value.stream === 'function' &&\n        typeof value.arrayBuffer === 'function' &&\n        typeof value.constructor === 'function' &&\n        typeof value.constructor.name === 'string' &&\n        /^(Blob|File)$/.test(value.constructor.name) &&\n        /^(Blob|File)$/.test(value[Symbol.toStringTag])\n    );\n};\n\nconst isFormData = (value: any): value is FormData => {\n    return value instanceof FormData;\n};\n\nconst base64 = (str: string): string => {\n    try {\n        return btoa(str);\n    } catch (err) {\n        // @ts-ignore\n        return Buffer.from(str).toString('base64');\n    }\n};\n\nconst getQueryString = (params: Record<string, any>): string => {\n    const qs: string[] = [];\n\n    const append = (key: string, value: any) => {\n        qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n    };\n\n    const process = (key: string, value: any) => {\n        if (isDefined(value)) {\n            if (Array.isArray(value)) {\n                value.forEach(v => {\n                    process(key, v);\n                });\n            } else if (typeof value === 'object') {\n                Object.entries(value).forEach(([k, v]) => {\n                    process(`${key}[${k}]`, v);\n                });\n            } else {\n                append(key, value);\n            }\n        }\n    };\n\n    Object.entries(params).forEach(([key, value]) => {\n        process(key, value);\n    });\n\n    if (qs.length > 0) {\n        return `?${qs.join('&')}`;\n    }\n\n    return '';\n};\n\nconst getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {\n    const encoder = config.ENCODE_PATH || encodeURI;\n\n    const path = options.url\n        .replace('{api-version}', config.VERSION)\n        .replace(/{(.*?)}/g, (substring: string, group: string) => {\n            if (options.path?.hasOwnProperty(group)) {\n                return encoder(String(options.path[group]));\n            }\n            return substring;\n        });\n\n    const url = `${config.BASE}${path}`;\n    if (options.query) {\n        return `${url}${getQueryString(options.query)}`;\n    }\n    return url;\n};\n\nconst getFormData = (options: ApiRequestOptions): FormData | undefined => {\n    if (options.formData) {\n        const formData = new FormData();\n\n        const process = (key: string, value: any) => {\n            if (isString(value) || isBlob(value)) {\n                formData.append(key, value);\n            } else {\n                formData.append(key, JSON.stringify(value));\n            }\n        };\n\n        Object.entries(options.formData)\n            .filter(([_, value]) => isDefined(value))\n            .forEach(([key, value]) => {\n                if (Array.isArray(value)) {\n                    value.forEach(v => process(key, v));\n                } else {\n                    process(key, value);\n                }\n            });\n\n        return formData;\n    }\n    return undefined;\n};\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\n\nconst resolve = async <T>(options: ApiRequestOptions, resolver?: T | Resolver<T>): Promise<T | undefined> => {\n    if (typeof resolver === 'function') {\n        return (resolver as Resolver<T>)(options);\n    }\n    return resolver;\n};\n\nconst getHeaders = async (config: OpenAPIConfig, options: ApiRequestOptions): Promise<Headers> => {\n    const token = await resolve(options, config.TOKEN);\n    const username = await resolve(options, config.USERNAME);\n    const password = await resolve(options, config.PASSWORD);\n    const additionalHeaders = await resolve(options, config.HEADERS);\n\n    const headers = Object.entries({\n        Accept: 'application/json',\n        ...additionalHeaders,\n        ...options.headers,\n    })\n        .filter(([_, value]) => isDefined(value))\n        .reduce((headers, [key, value]) => ({\n            ...headers,\n            [key]: String(value),\n        }), {} as Record<string, string>);\n\n    if (isStringWithValue(token)) {\n        headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    if (isStringWithValue(username) && isStringWithValue(password)) {\n        const credentials = base64(`${username}:${password}`);\n        headers['Authorization'] = `Basic ${credentials}`;\n    }\n\n    if (options.body) {\n        if (options.mediaType) {\n            headers['Content-Type'] = options.mediaType;\n        } else if (isBlob(options.body)) {\n            headers['Content-Type'] = options.body.type || 'application/octet-stream';\n        } else if (isString(options.body)) {\n            headers['Content-Type'] = 'text/plain';\n        } else if (!isFormData(options.body)) {\n            headers['Content-Type'] = 'application/json';\n        }\n    }\n\n    return new Headers(headers);\n};\n\nconst getRequestBody = (options: ApiRequestOptions): any => {\n    if (options.body !== undefined) {\n        if (options.mediaType?.includes('/json')) {\n            return JSON.stringify(options.body)\n        } else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {\n            return options.body;\n        } else {\n            return JSON.stringify(options.body);\n        }\n    }\n    return undefined;\n};\n\nexport const sendRequest = async (\n    config: OpenAPIConfig,\n    options: ApiRequestOptions,\n    url: string,\n    body: any,\n    formData: FormData | undefined,\n    headers: Headers,\n    onCancel: OnCancel\n): Promise<Response> => {\n    const controller = new AbortController();\n\n    const request: RequestInit = {\n        headers,\n        body: body ?? formData,\n        method: options.method,\n        signal: controller.signal,\n    };\n\n    if (config.WITH_CREDENTIALS) {\n        request.credentials = config.CREDENTIALS;\n    }\n\n    onCancel(() => controller.abort());\n\n    return await fetch(url, request);\n};\n\nconst getResponseHeader = (response: Response, responseHeader?: string): string | undefined => {\n    if (responseHeader) {\n        const content = response.headers.get(responseHeader);\n        if (isString(content)) {\n            return content;\n        }\n    }\n    return undefined;\n};\n\nconst getResponseBody = async (response: Response): Promise<any> => {\n    if (response.status !== 204) {\n        try {\n            const contentType = response.headers.get('Content-Type');\n            if (contentType) {\n                const jsonTypes = ['application/json', 'application/problem+json']\n                const isJSON = jsonTypes.some(type => contentType.toLowerCase().startsWith(type));\n                if (isJSON) {\n                    return await response.json();\n                } else {\n                    return await response.text();\n                }\n            }\n        } catch (error) {\n            console.error(error);\n        }\n    }\n    return undefined;\n};\n\nconst catchErrorCodes = (options: ApiRequestOptions, result: ApiResult): void => {\n    const errors: Record<number, string> = {\n        400: 'Bad Request',\n        401: 'Unauthorized',\n        403: 'Forbidden',\n        404: 'Not Found',\n        500: 'Internal Server Error',\n        502: 'Bad Gateway',\n        503: 'Service Unavailable',\n        ...options.errors,\n    }\n\n    const error = errors[result.status];\n    if (error) {\n        throw new ApiError(options, result, error);\n    }\n\n    if (!result.ok) {\n        throw new ApiError(options, result, 'Generic Error');\n    }\n};\n\n/**\n * Request method\n * @param config The OpenAPI configuration object\n * @param options The request options from the service\n * @returns CancelablePromise<T>\n * @throws ApiError\n */\nexport const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions): CancelablePromise<T> => {\n    return new CancelablePromise(async (resolve, reject, onCancel) => {\n        try {\n            const url = getUrl(config, options);\n            const formData = getFormData(options);\n            const body = getRequestBody(options);\n            const headers = await getHeaders(config, options);\n\n            if (!onCancel.isCancelled) {\n                const response = await sendRequest(config, options, url, body, formData, headers, onCancel);\n                const responseBody = await getResponseBody(response);\n                const responseHeader = getResponseHeader(response, options.responseHeader);\n\n                const result: ApiResult = {\n                    url,\n                    ok: response.ok,\n                    status: response.status,\n                    statusText: response.statusText,\n                    body: responseHeader ?? responseBody,\n                };\n\n                catchErrorCodes(options, result);\n\n                resolve(result.body);\n            }\n        } catch (error) {\n            reject(error);\n        }\n    });\n};\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport { BaseHttpRequest } from './BaseHttpRequest';\nimport type { CancelablePromise } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\nimport { request as __request } from './request';\n\nexport class FetchHttpRequest extends BaseHttpRequest {\n\n    constructor(config: OpenAPIConfig) {\n        super(config);\n    }\n\n    /**\n     * Request method\n     * @param options The request options from the service\n     * @returns CancelablePromise<T>\n     * @throws ApiError\n     */\n    public override request<T>(options: ApiRequestOptions): CancelablePromise<T> {\n        return __request(this.config, options);\n    }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { Alist } from '../models/Alist';\nimport type { AlistInput } from '../models/AlistInput';\nimport type { HttpResponseMessage } from '../models/HttpResponseMessage';\nimport type { ShareListInput } from '../models/ShareListInput';\nimport type { ShareListReadAccessRequest } from '../models/ShareListReadAccessRequest';\nimport type { ShareListWithUserInput } from '../models/ShareListWithUserInput';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class AListService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * add a new list\n     * @param requestBody A list object\n     * @returns Alist List has been created\n     * @throws ApiError\n     */\n    public addList(\n        requestBody: AlistInput,\n    ): CancelablePromise<Alist> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/alist',\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                400: `Bad request, something is wrong with the list object`,\n                422: `Input had no errors but was not valid`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Get a list\n     * @param uuid UUID of list\n     * @returns Alist Return a list, data will depend on the list type\n     * @throws ApiError\n     */\n    public getListByUuid(\n        uuid: string,\n    ): CancelablePromise<Alist> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/alist/{uuid}',\n            path: {\n                'uuid': uuid,\n            },\n            errors: {\n                403: `User making request does not have access to the list in question`,\n                404: `List is not in the system`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Update a list\n     * @param uuid UUID of list\n     * @param requestBody List to update\n     * @returns Alist Return a list, data will depend on the list type\n     * @throws ApiError\n     */\n    public updateListByUuid(\n        uuid: string,\n        requestBody: Alist,\n    ): CancelablePromise<Alist> {\n        return this.httpRequest.request({\n            method: 'PUT',\n            url: '/alist/{uuid}',\n            path: {\n                'uuid': uuid,\n            },\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                403: `User making request does not have access to the list in question`,\n                404: `List is not in the system`,\n                422: `Input had no errors but was not valid`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Delete a list\n     * @param uuid UUID of list\n     * @returns HttpResponseMessage list deleted\n     * @throws ApiError\n     */\n    public deleteListByUuid(\n        uuid: string,\n    ): CancelablePromise<HttpResponseMessage> {\n        return this.httpRequest.request({\n            method: 'DELETE',\n            url: '/alist/{uuid}',\n            path: {\n                'uuid': uuid,\n            },\n            errors: {\n                403: `UUID does not match that of the logged in user`,\n                404: `List is not in the system`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Query the lists the user has access to and apply jq filters to include or exclude rows (it does not return data, so aim to filter true or false)\n     * @param requestBody A jq filter, if it runs in the command line, it should run here (using gojq), defaults to \"true\"\n     * @returns Alist Return an array of lists\n     * @throws ApiError\n     */\n    public postSearchWithJq(\n        requestBody?: string,\n    ): CancelablePromise<Array<Alist>> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/alist/search/jq',\n            body: requestBody,\n            mediaType: 'text/plain',\n            errors: {\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Get lists that I have created, or have been shared with me\n     * @param labels Filter lists by one or many labels. \"separated by ,\". Default is empty\n     * @param listType Filter lists by type v1, v2 etc. Default is empty\n     * @param includeSystemLists Include or exclue lists created by the system for the user Default is 0\n     * @returns Alist Return an array of lists\n     * @throws ApiError\n     */\n    public getListsByMe(\n        labels?: string,\n        listType?: string,\n        includeSystemLists?: 0 | 1,\n    ): CancelablePromise<Array<Alist>> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/alist/by/me',\n            query: {\n                'labels': labels,\n                'list_type': listType,\n                'include_system_lists': includeSystemLists,\n            },\n            errors: {\n                422: `Something wrong with the input`,\n            },\n        });\n    }\n\n    /**\n     * Set share access for a list\n     * @param requestBody What type of sharing should be done\n     * @returns HttpResponseMessage Share updated\n     * @throws ApiError\n     */\n    public shareList(\n        requestBody: ShareListInput,\n    ): CancelablePromise<HttpResponseMessage> {\n        return this.httpRequest.request({\n            method: 'PUT',\n            url: '/alist/share',\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                403: `Your user needs to be the owner of the list`,\n                404: `List is not in the system`,\n                422: `Unable to share the list for different reasons`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Setting specific access for the user, a user can request access via action.\n     * @param requestBody What type of sharing should be done\n     * @returns HttpResponseMessage Access updated for a specific user based on permission\n     * @throws ApiError\n     */\n    public setListAccessForUser(\n        requestBody: ShareListWithUserInput,\n    ): CancelablePromise<HttpResponseMessage> {\n        return this.httpRequest.request({\n            method: 'PUT',\n            url: '/alist/share/access',\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                400: `List is not in the system`,\n                403: `Your user needs to be the owner of the list`,\n                404: `List is not in the system`,\n                422: `Unable to share the list for different reasons`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Get list of users requesting raccess\n     * @returns ShareListReadAccessRequest List of users waiting request access\n     * @throws ApiError\n     */\n    public v1GetShareListAccessRequest(): CancelablePromise<ShareListReadAccessRequest> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/alist/share/access/request',\n            errors: {\n                500: `unexpected error`,\n            },\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { AppSettingsRemindV1 } from '../models/AppSettingsRemindV1';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class AppSettingsService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Enable or disable push notifications for spaced repetition in remindV1\n     * @param requestBody Settings\n     * @returns AppSettingsRemindV1 Settings updated\n     * @throws ApiError\n     */\n    public setRemindV1(\n        requestBody: AppSettingsRemindV1,\n    ): CancelablePromise<AppSettingsRemindV1> {\n        return this.httpRequest.request({\n            method: 'PUT',\n            url: '/app-settings/remind_v1',\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                422: `Something wrong with the payload`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { HttpAssetShareRequestBody } from '../models/HttpAssetShareRequestBody';\nimport type { HttpAssetUploadRequestBody } from '../models/HttpAssetUploadRequestBody';\nimport type { HttpAssetUploadResponse } from '../models/HttpAssetUploadResponse';\nimport type { HttpResponseMessage } from '../models/HttpResponseMessage';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class AssetService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Set asset for public or private access\n     * @param requestBody Share with...\n     * @returns HttpResponseMessage Asset updated\n     * @throws ApiError\n     */\n    public shareAsset(\n        requestBody: HttpAssetShareRequestBody,\n    ): CancelablePromise<HttpResponseMessage> {\n        return this.httpRequest.request({\n            method: 'PUT',\n            url: '/assets/share',\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                400: `Most likely the wrong action`,\n                403: `Access denied, due to not being owner of asset`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Upload asset and link it to the user logged in\n     * @param formData File to upload\n     * @returns HttpAssetUploadResponse Asset uploaded\n     * @throws ApiError\n     */\n    public addUserAsset(\n        formData: HttpAssetUploadRequestBody,\n    ): CancelablePromise<HttpAssetUploadResponse> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/assets/upload',\n            formData: formData,\n            mediaType: 'multipart/form-data',\n            errors: {\n                400: `Bad request, missing uuid`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * @param uuid UUID of entry\n     * @returns any The asset.\n     * @throws ApiError\n     */\n    public getAsset(\n        uuid: string,\n    ): CancelablePromise<any> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/assets/{uuid}',\n            path: {\n                'uuid': uuid,\n            },\n        });\n    }\n\n    /**\n     * Deletes a single asset based on the UUID\n     * @param uuid UUID of asset\n     * @returns void\n     * @throws ApiError\n     */\n    public deleteAsset(\n        uuid: string,\n    ): CancelablePromise<void> {\n        return this.httpRequest.request({\n            method: 'DELETE',\n            url: '/assets/{uuid}',\n            path: {\n                'uuid': uuid,\n            },\n            errors: {\n                400: `Bad request, missing uuid`,\n                403: `Access denied, due to not being owner of asset`,\n                404: `Asset is not in the system`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ChallengeInfo } from '../models/ChallengeInfo';\nimport type { ChallengeInput } from '../models/ChallengeInput';\nimport type { ChallengeKind } from '../models/ChallengeKind';\nimport type { ChallengeShortInfo } from '../models/ChallengeShortInfo';\nimport type { HttpResponseMessage } from '../models/HttpResponseMessage';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class ChallengeService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Create a new challenge\n     * @param requestBody Setup a challenge\n     * @returns ChallengeShortInfo Challenge created\n     * @throws ApiError\n     */\n    public createChallenge(\n        requestBody: ChallengeInput,\n    ): CancelablePromise<ChallengeShortInfo> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/challenge/',\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                422: `Most likely, the description is empty or the kind is not valid`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Get all challenges for a given user\n     * @param userUuid userUUID to get challenges\n     * @param kind Filter challenges by a single kind\n     * @returns ChallengeShortInfo Return list of all challenges\n     * @throws ApiError\n     */\n    public getChallengesByUser(\n        userUuid: string,\n        kind?: ChallengeKind,\n    ): CancelablePromise<Array<ChallengeShortInfo>> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/challenges/{userUUID}',\n            path: {\n                'userUUID': userUuid,\n            },\n            query: {\n                'kind': kind,\n            },\n            errors: {\n                403: `Lacking permission to look up the user`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Join a challenge\n     * @param uuid UUID of entry\n     * @returns any Join challenge\n     * @throws ApiError\n     */\n    public joinChallenge(\n        uuid: string,\n    ): CancelablePromise<any> {\n        return this.httpRequest.request({\n            method: 'PUT',\n            url: '/challenge/{uuid}/join',\n            path: {\n                'uuid': uuid,\n            },\n            errors: {\n                400: `Bad request, missing uuid`,\n                404: `Challenge doesn't exist`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Leave a challenge\n     * @param uuid UUID of entry\n     * @returns any Left challenge\n     * @throws ApiError\n     */\n    public leaveChallenge(\n        uuid: string,\n    ): CancelablePromise<any> {\n        return this.httpRequest.request({\n            method: 'PUT',\n            url: '/challenge/{uuid}/leave',\n            path: {\n                'uuid': uuid,\n            },\n            errors: {\n                400: `Bad request, missing uuid`,\n                403: `You can only leave a challenge you have joined`,\n                404: `Challenge doesn't exist`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Get all challenge info, users and records\n     * @param uuid UUID of entry\n     * @returns ChallengeInfo Challenge info\n     * @throws ApiError\n     */\n    public getChallenge(\n        uuid: string,\n    ): CancelablePromise<ChallengeInfo> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/challenge/{uuid}',\n            path: {\n                'uuid': uuid,\n            },\n            errors: {\n                403: `You can only lookup challenges that you have joined`,\n                404: `Challenge doesn't exist`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Delete a challenge, forever\n     * @param uuid UUID of entry\n     * @returns HttpResponseMessage Challenge deleted\n     * @throws ApiError\n     */\n    public deleteChallenge(\n        uuid: string,\n    ): CancelablePromise<HttpResponseMessage> {\n        return this.httpRequest.request({\n            method: 'DELETE',\n            url: '/challenge/{uuid}',\n            path: {\n                'uuid': uuid,\n            },\n            errors: {\n                403: `You can only delete a challenge if you created it`,\n                404: `Challenge doesn't exist`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { Version } from '../models/Version';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class DefaultService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Get information about the server, linked to the git repo\n     * @returns Version OK\n     * @throws ApiError\n     */\n    public getServerVersion(): CancelablePromise<Version> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/version',\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { Alist } from '../models/Alist';\nimport type { ListSlideShowCMDConfigPDFV1Input } from '../models/ListSlideShowCMDConfigPDFV1Input';\nimport type { ListSlideShowCMDConfigVideoV1Input } from '../models/ListSlideShowCMDConfigVideoV1Input';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class ListSlideshowService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Add to the queue to have a custom slideshow made\n     * @param kind Slideshow kind\n     * @param requestBody Slideshow configuration\n     * @returns Alist Success, slideshow is queued for creation\n     * @throws ApiError\n     */\n    public listSlideshowCreate(\n        kind: 'pdf' | 'video',\n        requestBody: (ListSlideShowCMDConfigPDFV1Input | ListSlideShowCMDConfigVideoV1Input),\n    ): CancelablePromise<Alist> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/slideshow/create/{kind}',\n            path: {\n                'kind': kind,\n            },\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                403: `You do not have access to this list`,\n                422: `Something wrong with the input`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { HttpMobileRegisterInput } from '../models/HttpMobileRegisterInput';\nimport type { HttpResponseMessage } from '../models/HttpResponseMessage';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class MobileService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Register the user and the token, to be able to send push notifications\n     * @param requestBody Device information\n     * @returns HttpResponseMessage OK\n     * @throws ApiError\n     */\n    public registerDevice(\n        requestBody: HttpMobileRegisterInput,\n    ): CancelablePromise<HttpResponseMessage> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/mobile/register-device',\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                422: `Most likely, the token is empty, or the app_identifier is [empty, not valid]`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { PaymentCheckoutSession } from '../models/PaymentCheckoutSession';\nimport type { PaymentPriceData } from '../models/PaymentPriceData';\nimport type { PaymentSupportV1Input } from '../models/PaymentSupportV1Input';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class PaymentsService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Get public information of stripe key + prices\n     * @param tier Our tier name that then maps to a stripe product_id\n     * @returns PaymentPriceData Public information of stripe key + prices\n     * @throws ApiError\n     */\n    public getStripeDataByTier(\n        tier: string,\n    ): CancelablePromise<PaymentPriceData> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/payments/tier/{tier}/stripedata',\n            path: {\n                'tier': tier,\n            },\n            errors: {\n                403: `You need to be logged in to see the payment options`,\n            },\n        });\n    }\n\n    /**\n     * Get public information of stripe key + prices\n     * @returns PaymentPriceData Public information of stripe key + prices\n     * @throws ApiError\n     */\n    public getStripeData(): CancelablePromise<PaymentPriceData> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/payments/stripedata',\n            errors: {\n                403: `You need to be logged in to see the payment options`,\n            },\n        });\n    }\n\n    /**\n     * Create a checkout session in the system\n     * @param requestBody\n     * @returns PaymentCheckoutSession Created session id\n     * @throws ApiError\n     */\n    public createCheckoutSession(\n        requestBody: PaymentSupportV1Input,\n    ): CancelablePromise<PaymentCheckoutSession> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/payments/create-checkout-session',\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                403: `You need to be logged in to create a checkout session`,\n            },\n        });\n    }\n\n    /**\n     * Consume webhooks, today this only accepts webhooks from Stripe\n     * @returns any Returns no content\n     * @throws ApiError\n     */\n    public postWebhook(): CancelablePromise<any> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/payments/webhooks/stripe',\n            errors: {\n                400: `Error message from verifying the payload is from stripe`,\n            },\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { HttpPlankShareRequestBody } from '../models/HttpPlankShareRequestBody';\nimport type { HttpResponseMessage } from '../models/HttpResponseMessage';\nimport type { Plank } from '../models/Plank';\nimport type { PlankStats } from '../models/PlankStats';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class PlankService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Add plank stats\n     * @param requestBody Stats about the plank\n     * @param xChallenge Link plank record to a challenge uuid\n     * @returns Plank Plank record already exists\n     * @throws ApiError\n     */\n    public addPlankEntry(\n        requestBody: Plank,\n        xChallenge?: string,\n    ): CancelablePromise<Plank> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/plank/',\n            headers: {\n                'x-challenge': xChallenge,\n            },\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Get all planks for logged in user\n     * @returns Plank Return list of all entries\n     * @throws ApiError\n     */\n    public getPlankHistoryByLoggedInUser(): CancelablePromise<Array<Plank>> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/plank/history',\n            errors: {\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Get all planks for a given user, if not the logged in user, the history has to be shared.\n     * @param uuid UUID of entry\n     * @returns Plank Return list of all entries\n     * @throws ApiError\n     */\n    public getPlankHistoryByUser(\n        uuid: string,\n    ): CancelablePromise<Array<Plank>> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/plank/history/{uuid}',\n            path: {\n                'uuid': uuid,\n            },\n            errors: {\n                403: `You do not have access to read plank history for this user`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Delete a single entry based on the UUID\n     * @param uuid UUID of entry\n     * @returns HttpResponseMessage plank deleted\n     * @throws ApiError\n     */\n    public deletePlankEntry(\n        uuid: string,\n    ): CancelablePromise<HttpResponseMessage> {\n        return this.httpRequest.request({\n            method: 'DELETE',\n            url: '/plank/{uuid}',\n            path: {\n                'uuid': uuid,\n            },\n            errors: {\n                400: `Bad request, missing uuid`,\n                404: `Not able to find plank record linked to this user`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Get plank stats for a given user, if not the logged in user, the stats has to be shared.\n     * @param uuid UUID of entry\n     * @returns PlankStats Return stats\n     * @throws ApiError\n     */\n    public getPlankStatsByUser(\n        uuid: string,\n    ): CancelablePromise<PlankStats> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/plank/stats/{uuid}',\n            path: {\n                'uuid': uuid,\n            },\n            errors: {\n                401: `You need to login to see these stats, if you have access`,\n                403: `You do not have access to read plank stats for this user`,\n                404: `Not able to find plank stats by user`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Share Plank stats with the public or keep them private\n     * @param requestBody Share with the public or make private\n     * @returns HttpResponseMessage Share updated\n     * @throws ApiError\n     */\n    public sharePlankStats(\n        requestBody: HttpPlankShareRequestBody,\n    ): CancelablePromise<HttpResponseMessage> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/plank/stats/share',\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                400: `The input was not valid`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Share Plank history with the public or keep them private\n     * @param requestBody Share with the public or make private\n     * @returns HttpResponseMessage Share updated\n     * @throws ApiError\n     */\n    public sharePlankHistory(\n        requestBody: HttpPlankShareRequestBody,\n    ): CancelablePromise<HttpResponseMessage> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/plank/history/share',\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                400: `The input was not valid`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { HttpResponseMessage } from '../models/HttpResponseMessage';\nimport type { RemindDailySettings } from '../models/RemindDailySettings';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class RemindService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Set remind settings for app_identifier, if you have done an activity for that day, it will not count towards the motivation message\n     * @param requestBody Remind settings\n     * @returns RemindDailySettings Remind settings updated\n     * @throws ApiError\n     */\n    public setRemindDailySetting(\n        requestBody: RemindDailySettings,\n    ): CancelablePromise<RemindDailySettings> {\n        return this.httpRequest.request({\n            method: 'PUT',\n            url: '/remind/daily/',\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                422: `Something wrong with the payload`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * @param appIdentifier Via app_identifier which settings to remove\n     * @returns RemindDailySettings Settings\n     * @throws ApiError\n     */\n    public getRemindDailySettingsByAppIdentifier(\n        appIdentifier: string,\n    ): CancelablePromise<RemindDailySettings> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/remind/daily/{app_identifier}',\n            path: {\n                'app_identifier': appIdentifier,\n            },\n            errors: {\n                404: `Settings not found`,\n                422: `Check the app identifier is valid`,\n            },\n        });\n    }\n\n    /**\n     * @param appIdentifier Via app_identifier which settings to remove\n     * @returns HttpResponseMessage settings deleted\n     * @throws ApiError\n     */\n    public deleteRemindDailySettingsByAppIdentifier(\n        appIdentifier: string,\n    ): CancelablePromise<HttpResponseMessage> {\n        return this.httpRequest.request({\n            method: 'DELETE',\n            url: '/remind/daily/{app_identifier}',\n            path: {\n                'app_identifier': appIdentifier,\n            },\n            errors: {\n                404: `app_identifier not found, I wonder if I want this one`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { HttpResponseMessage } from '../models/HttpResponseMessage';\nimport type { SpacedRepetition } from '../models/SpacedRepetition';\nimport type { SpacedRepetitionEntryViewed } from '../models/SpacedRepetitionEntryViewed';\nimport type { SpacedRepetitionNew } from '../models/SpacedRepetitionNew';\nimport type { SpacedRepetitionOvertimeInfo } from '../models/SpacedRepetitionOvertimeInfo';\nimport type { SpacedRepetitionOvertimeInput } from '../models/SpacedRepetitionOvertimeInput';\nimport type { SpacedRepetitionOvertimeInputBase } from '../models/SpacedRepetitionOvertimeInputBase';\nimport type { SpacedRepetitionStats } from '../models/SpacedRepetitionStats';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class SpacedRepetitionService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Add entry for spaced based learning\n     * @param requestBody Entry to add for spaced based learning\n     * @returns SpacedRepetition Entry already exists\n     * @throws ApiError\n     */\n    public addSpacedRepetitionEntry(\n        requestBody: SpacedRepetitionNew,\n    ): CancelablePromise<SpacedRepetition> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/spaced-repetition/',\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                422: `Something wrong with the payload`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Deletes a single entry based on the UUID\n     * @param uuid UUID of entry\n     * @returns HttpResponseMessage entry deleted\n     * @throws ApiError\n     */\n    public deleteSpacedRepetitionEntry(\n        uuid: string,\n    ): CancelablePromise<HttpResponseMessage> {\n        return this.httpRequest.request({\n            method: 'DELETE',\n            url: '/spaced-repetition/{uuid}',\n            path: {\n                'uuid': uuid,\n            },\n            errors: {\n                400: `Bad request, missing uuid`,\n                404: `Entry doesnt exist.`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Get all entries for spaced repetition learning\n     * @returns SpacedRepetition Return list of all entries\n     * @throws ApiError\n     */\n    public getSpacedRepetitionEntries(): CancelablePromise<Array<SpacedRepetition>> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/spaced-repetition/all',\n            errors: {\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Get next entry for spaced based learning\n     * @returns SpacedRepetition Return entry\n     * @throws ApiError\n     */\n    public getNextSpacedRepetitionEntry(): CancelablePromise<SpacedRepetition> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/spaced-repetition/next',\n            errors: {\n                404: `User has no entries.`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Update spaced entry with feedback from the user\n     * @param requestBody Tell the system if we should move forward or backwards with the learning\n     * @returns SpacedRepetition Entry updated\n     * @throws ApiError\n     */\n    public updateSpacedRepetitionEntry(\n        requestBody: SpacedRepetitionEntryViewed,\n    ): CancelablePromise<SpacedRepetition> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/spaced-repetition/viewed',\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                404: `Entry not found, no body`,\n                422: `Something wrong with the payload`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Ugly light url to check if list active for this user.\n     * @param uuid List UUID to check\n     * @returns any List is active\n     * @throws ApiError\n     */\n    public spacedRepetitionOvertimeIsActive(\n        uuid: string,\n    ): CancelablePromise<any> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/spaced-repetition/overtime/active/{uuid}',\n            path: {\n                'uuid': uuid,\n            },\n            errors: {\n                404: `List is not active`,\n            },\n        });\n    }\n\n    /**\n     * Add for dripfeed (Slowly add this list for spaced repetition learning).\n     * @param requestBody list to add to dripfeed\n     * @returns SpacedRepetitionOvertimeInfo Success, list added to dripfeed\n     * @throws ApiError\n     */\n    public spacedRepetitionAddListToOvertime(\n        requestBody: SpacedRepetitionOvertimeInput,\n    ): CancelablePromise<SpacedRepetitionOvertimeInfo> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/spaced-repetition/overtime',\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                403: `You do not have access to read list`,\n                404: `List not found`,\n                422: `Something wrong with the input`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Remove list from dripfeed.\n     * @param requestBody\n     * @returns HttpResponseMessage Success, list removed\n     * @throws ApiError\n     */\n    public spacedRepetitionRemoveListFromOvertime(\n        requestBody: SpacedRepetitionOvertimeInputBase,\n    ): CancelablePromise<HttpResponseMessage> {\n        return this.httpRequest.request({\n            method: 'DELETE',\n            url: '/spaced-repetition/overtime',\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                403: `You do not have access to do this action`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Stats for spaced repetition\n     * @param uuid userUUID to check, today it is only for the logged in user\n     * @returns SpacedRepetitionStats Stats\n     * @throws ApiError\n     */\n    public spacedRepetitionStats(\n        uuid: string,\n    ): CancelablePromise<SpacedRepetitionStats> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/spaced-repetition/stats/{uuid}',\n            path: {\n                'uuid': uuid,\n            },\n            errors: {\n                403: `You do not have access to do this action`,\n                404: `No stats found`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { HttpResponseMessage } from '../models/HttpResponseMessage';\nimport type { HttpTokenToCookieRequest } from '../models/HttpTokenToCookieRequest';\nimport type { HttpUserInfoInput } from '../models/HttpUserInfoInput';\nimport type { HttpUserInfoResponse } from '../models/HttpUserInfoResponse';\nimport type { HttpUserLoginIDPInput } from '../models/HttpUserLoginIDPInput';\nimport type { HttpUserLoginRequest } from '../models/HttpUserLoginRequest';\nimport type { HttpUserLoginResponse } from '../models/HttpUserLoginResponse';\nimport type { HttpUserRegisterInput } from '../models/HttpUserRegisterInput';\nimport type { HttpUserRegisterResponse } from '../models/HttpUserRegisterResponse';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class UserService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Register a new user with username and password\n     * @param requestBody Username and password\n     * @param xUserRegister Restrict access to this endpoint, if you add the header and it matches the key, you are in.\n     * @returns HttpUserRegisterResponse User already exists\n     * @throws ApiError\n     */\n    public registerUserWithUsernameAndPassword(\n        requestBody: HttpUserRegisterInput,\n        xUserRegister?: string,\n    ): CancelablePromise<HttpUserRegisterResponse> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/user/register',\n            headers: {\n                'x-user-register': xUserRegister,\n            },\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                400: `Bad request`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Given a token, confirm its valid and then return it in a cookie\n     * @param requestBody A hack to be able to create a cookie from the server with a valid token\n     * @returns HttpUserLoginResponse You now have a login session\n     * @throws ApiError\n     */\n    public tokenToCookie(\n        requestBody: HttpTokenToCookieRequest,\n    ): CancelablePromise<HttpUserLoginResponse> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/user/token/to/cookie',\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                400: `Bad input, most likely, invalid json`,\n                403: `token not found or user_uuid not matching the token`,\n                422: `Something wrong with the post data, token and user_uuid can not be empty`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Login with idToken, mostly to support mobile devices.\n     * @param requestBody Based on the idp, we will verify your id_token and log you in.\n     * @returns HttpUserLoginResponse You now have a login session\n     * @throws ApiError\n     */\n    public loginWithIdpIdToken(\n        requestBody: HttpUserLoginIDPInput,\n    ): CancelablePromise<HttpUserLoginResponse> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/user/login/idp',\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                400: `Bad input, most likely, invalid json`,\n                403: `Missing data or invalid id_token`,\n                422: `Idp not supported`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Login with username and password. The token can be used in future api requests via bearerAuth\n     * @param requestBody Username and password\n     * @returns HttpUserLoginResponse You now have a login session\n     * @throws ApiError\n     */\n    public loginWithUsernameAndPassword(\n        requestBody: HttpUserLoginRequest,\n    ): CancelablePromise<HttpUserLoginResponse> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/user/login',\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                400: `Bad request`,\n                403: `Username and password did not match what was in the system`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Get user information, app settings, preferences some user state\n     * @param uuid UUID of user\n     * @returns HttpUserInfoResponse user info has been changed\n     * @throws ApiError\n     */\n    public getUserInfo(\n        uuid: string,\n    ): CancelablePromise<HttpUserInfoResponse> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/user/info/{uuid}',\n            path: {\n                'uuid': uuid,\n            },\n        });\n    }\n\n    /**\n     * Single or many updates to the users information\n     * @param uuid UUID of user to modify\n     * @param requestBody Allowed attributes to update\n     * @returns HttpResponseMessage user info has been changed\n     * @throws ApiError\n     */\n    public patchUserInfo(\n        uuid: string,\n        requestBody: HttpUserInfoInput,\n    ): CancelablePromise<HttpResponseMessage> {\n        return this.httpRequest.request({\n            method: 'PATCH',\n            url: '/user/info/{uuid}',\n            path: {\n                'uuid': uuid,\n            },\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                500: `unexpected error`,\n            },\n        });\n    }\n\n    /**\n     * Deletes a user and there lists\n     * @param uuid UUID of entry\n     * @returns HttpResponseMessage user deleted\n     * @throws ApiError\n     */\n    public deleteUser(\n        uuid: string,\n    ): CancelablePromise<HttpResponseMessage> {\n        return this.httpRequest.request({\n            method: 'DELETE',\n            url: '/user/{uuid}',\n            path: {\n                'uuid': uuid,\n            },\n            errors: {\n                403: `UUID does not match that of the logged in user`,\n                500: `unexpected error`,\n            },\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { BaseHttpRequest } from './core/BaseHttpRequest';\nimport type { OpenAPIConfig } from './core/OpenAPI';\nimport { FetchHttpRequest } from './core/FetchHttpRequest';\n\nimport { AListService } from './services/AListService';\nimport { AppSettingsService } from './services/AppSettingsService';\nimport { AssetService } from './services/AssetService';\nimport { ChallengeService } from './services/ChallengeService';\nimport { DefaultService } from './services/DefaultService';\nimport { ListSlideshowService } from './services/ListSlideshowService';\nimport { MobileService } from './services/MobileService';\nimport { PaymentsService } from './services/PaymentsService';\nimport { PlankService } from './services/PlankService';\nimport { RemindService } from './services/RemindService';\nimport { SpacedRepetitionService } from './services/SpacedRepetitionService';\nimport { UserService } from './services/UserService';\n\ntype HttpRequestConstructor = new (config: OpenAPIConfig) => BaseHttpRequest;\n\nexport class OpenApiClient {\n\n    public readonly aList: AListService;\n    public readonly appSettings: AppSettingsService;\n    public readonly asset: AssetService;\n    public readonly challenge: ChallengeService;\n    public readonly default: DefaultService;\n    public readonly listSlideshow: ListSlideshowService;\n    public readonly mobile: MobileService;\n    public readonly payments: PaymentsService;\n    public readonly plank: PlankService;\n    public readonly remind: RemindService;\n    public readonly spacedRepetition: SpacedRepetitionService;\n    public readonly user: UserService;\n\n    public readonly request: BaseHttpRequest;\n\n    constructor(config?: Partial<OpenAPIConfig>, HttpRequest: HttpRequestConstructor = FetchHttpRequest) {\n        this.request = new HttpRequest({\n            BASE: config?.BASE ?? 'https://learnalist.net/api/v1',\n            VERSION: config?.VERSION ?? '1.0',\n            WITH_CREDENTIALS: config?.WITH_CREDENTIALS ?? false,\n            CREDENTIALS: config?.CREDENTIALS ?? 'include',\n            TOKEN: config?.TOKEN,\n            USERNAME: config?.USERNAME,\n            PASSWORD: config?.PASSWORD,\n            HEADERS: config?.HEADERS,\n            ENCODE_PATH: config?.ENCODE_PATH,\n        });\n\n        this.aList = new AListService(this.request);\n        this.appSettings = new AppSettingsService(this.request);\n        this.asset = new AssetService(this.request);\n        this.challenge = new ChallengeService(this.request);\n        this.default = new DefaultService(this.request);\n        this.listSlideshow = new ListSlideshowService(this.request);\n        this.mobile = new MobileService(this.request);\n        this.payments = new PaymentsService(this.request);\n        this.plank = new PlankService(this.request);\n        this.remind = new RemindService(this.request);\n        this.spacedRepetition = new SpacedRepetitionService(this.request);\n        this.user = new UserService(this.request);\n    }\n}\n\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\ntype Headers = Record<string, string>;\n\nexport type OpenAPIConfig = {\n    BASE: string;\n    VERSION: string;\n    WITH_CREDENTIALS: boolean;\n    CREDENTIALS: 'include' | 'omit' | 'same-origin';\n    TOKEN?: string | Resolver<string>;\n    USERNAME?: string | Resolver<string>;\n    PASSWORD?: string | Resolver<string>;\n    HEADERS?: Headers | Resolver<Headers>;\n    ENCODE_PATH?: (path: string) => string;\n};\n\nexport const OpenAPI: OpenAPIConfig = {\n    BASE: 'https://learnalist.net/api/v1',\n    VERSION: '1.0',\n    WITH_CREDENTIALS: false,\n    CREDENTIALS: 'include',\n    TOKEN: undefined,\n    USERNAME: undefined,\n    PASSWORD: undefined,\n    HEADERS: undefined,\n    ENCODE_PATH: undefined,\n};\n"],"mappings":"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","names":["request","resolve","headers","request","resolve"]}